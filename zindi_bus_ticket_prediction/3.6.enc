{
  "cells": [
    {
      "metadata": {
        "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
        "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
        "trusted": true
      },
      "cell_type": "code",
      "source": "# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom collections import Counter\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix, make_scorer\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVC\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold\nsns.set(style='white', context='notebook', palette='deep')\n\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"../input\"))\n\n# Any results you write to the current directory are saved as output.",
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": "['train_revised.csv', 'train_aggr5.csv', 'test_questions.csv']\n",
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": "/opt/conda/lib/python3.6/site-packages/sklearn/ensemble/weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n  from numpy.core.umath_tests import inner1d\n",
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "_cell_guid": "79c7e3d0-c299-4dcb-8224-4455121ee9b0",
        "_uuid": "d629ff2d2480ee46fbb7e2d37f6b5fab8052498a",
        "trusted": true
      },
      "cell_type": "code",
      "source": "train = pd.read_csv(\"../input/train_revised.csv\")\ntest = pd.read_csv(\"../input/test_questions.csv\")\ntrain.head()",
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "   ride_id seat_number     ...      car_type max_capacity\n0     1442         15A     ...           Bus           49\n1     5437         14A     ...           Bus           49\n2     5710          8B     ...           Bus           49\n3     5777         19A     ...           Bus           49\n4     5778         11A     ...           Bus           49\n\n[5 rows x 10 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ride_id</th>\n      <th>seat_number</th>\n      <th>payment_method</th>\n      <th>payment_receipt</th>\n      <th>travel_date</th>\n      <th>travel_time</th>\n      <th>travel_from</th>\n      <th>travel_to</th>\n      <th>car_type</th>\n      <th>max_capacity</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1442</td>\n      <td>15A</td>\n      <td>Mpesa</td>\n      <td>UZUEHCBUSO</td>\n      <td>17-10-17</td>\n      <td>7:15</td>\n      <td>Migori</td>\n      <td>Nairobi</td>\n      <td>Bus</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5437</td>\n      <td>14A</td>\n      <td>Mpesa</td>\n      <td>TIHLBUSGTE</td>\n      <td>19-11-17</td>\n      <td>7:12</td>\n      <td>Migori</td>\n      <td>Nairobi</td>\n      <td>Bus</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5710</td>\n      <td>8B</td>\n      <td>Mpesa</td>\n      <td>EQX8Q5G19O</td>\n      <td>26-11-17</td>\n      <td>7:05</td>\n      <td>Keroka</td>\n      <td>Nairobi</td>\n      <td>Bus</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5777</td>\n      <td>19A</td>\n      <td>Mpesa</td>\n      <td>SGP18CL0ME</td>\n      <td>27-11-17</td>\n      <td>7:10</td>\n      <td>Homa Bay</td>\n      <td>Nairobi</td>\n      <td>Bus</td>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5778</td>\n      <td>11A</td>\n      <td>Mpesa</td>\n      <td>BM97HFRGL9</td>\n      <td>27-11-17</td>\n      <td>7:12</td>\n      <td>Migori</td>\n      <td>Nairobi</td>\n      <td>Bus</td>\n      <td>49</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "_uuid": "7919bc2fffc420e65e05f0e3f4934bfba72fed0f"
      },
      "cell_type": "markdown",
      "source": "Data preprocessing"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7bbd3f825f222d2733d55fdb92b431f50fb38d15"
      },
      "cell_type": "code",
      "source": "train['travel_date'] = pd.to_datetime(train['travel_date'])\n#train['m_y'] = train['travel_date'].dt.strftime('%Y-%m')\ntrain['month'] = train['travel_date'].dt.strftime('%m')",
      "execution_count": 3,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "38e70824adddd4799742dc10348a4d306c63a69a"
      },
      "cell_type": "code",
      "source": "train[\"travel_date\"] = pd.to_datetime(train[\"travel_date\"],infer_datetime_format=True)\ntrain[\"travel_date\"] = train[\"travel_date\"].dt.dayofweek #change the full date to day of week",
      "execution_count": 4,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "5ac5b40d630820511d2caa35df4f9c71e0ff9cf7"
      },
      "cell_type": "code",
      "source": "train[\"car_type\"] = pd.Categorical(train[\"car_type\"])\ncar_type_categories = train.car_type.cat.categories\ntrain[\"car_type\"] = train.car_type.cat.codes",
      "execution_count": 5,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ff2304fc637a9d64104e4a9b229b343397095260"
      },
      "cell_type": "code",
      "source": "train[\"travel_from\"] = pd.Categorical(train[\"travel_from\"])\ntravel_from_categories = train.travel_from.cat.categories\ntrain[\"travel_from\"] = train.travel_from.cat.codes",
      "execution_count": 6,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "28eefcfb3f0076dd702e954e263fbf6b663d4b0e"
      },
      "cell_type": "code",
      "source": "#express travel time in minutes\ntrain[\"travel_time\"] = train[\"travel_time\"].str.split(':').apply(lambda x: int(x[0]) * 60 + int(x[1]))",
      "execution_count": 7,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "625dbacac8fa62345b4219f41f356708f6c3a766"
      },
      "cell_type": "code",
      "source": "cols = ['seat_number', 'payment_method', 'payment_receipt', 'travel_to']\ntrain = train.drop(cols, axis=True)",
      "execution_count": 8,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ab054fefa66ad69594d123282d5d1d434dacc848"
      },
      "cell_type": "code",
      "source": "ride_id_dict = {} \nfor ride_id in train[\"ride_id\"]:\n    if not ride_id in ride_id_dict:\n        ride_id_dict[ride_id] = 1\n    else:\n        ride_id_dict[ride_id] += 1",
      "execution_count": 9,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "f246f6a3bb966685d46bcfb9ff0414754f6de648"
      },
      "cell_type": "code",
      "source": "train.drop_duplicates(inplace=True)\ntrain.reset_index(drop= True, inplace=True)",
      "execution_count": 10,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7ac0e5910f58d22b350d3b6038d728e7624cbcf8"
      },
      "cell_type": "code",
      "source": "train[\"number_of_tickets\"]= np.zeros(len(train))",
      "execution_count": 11,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "40bf1730ea5549335314be0e4aede4761f0ce97a"
      },
      "cell_type": "code",
      "source": "for i in range(len(train)):\n    ride_id = train.loc[i][\"ride_id\"]\n    train.at[i,\"number_of_tickets\"] = ride_id_dict[ride_id]",
      "execution_count": 12,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "15232a73ec166e795ed07b68b87f21deddf3355b"
      },
      "cell_type": "code",
      "source": "train.drop(['ride_id'], axis=1, inplace=True) #ride_id is unnecessary in training set",
      "execution_count": 13,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "45b415ef5d5436f4d1453d3291b45978480a92b7"
      },
      "cell_type": "code",
      "source": "train.head()",
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "   travel_date  travel_time        ...          month  number_of_tickets\n0            1          435        ...             10                1.0\n1            6          432        ...             11                1.0\n2            6          425        ...             11                1.0\n3            0          430        ...             11                5.0\n4            0          432        ...             11               31.0\n\n[5 rows x 7 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>travel_date</th>\n      <th>travel_time</th>\n      <th>travel_from</th>\n      <th>car_type</th>\n      <th>max_capacity</th>\n      <th>month</th>\n      <th>number_of_tickets</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>435</td>\n      <td>9</td>\n      <td>0</td>\n      <td>49</td>\n      <td>10</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>6</td>\n      <td>432</td>\n      <td>9</td>\n      <td>0</td>\n      <td>49</td>\n      <td>11</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6</td>\n      <td>425</td>\n      <td>4</td>\n      <td>0</td>\n      <td>49</td>\n      <td>11</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>430</td>\n      <td>1</td>\n      <td>0</td>\n      <td>49</td>\n      <td>11</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>432</td>\n      <td>9</td>\n      <td>0</td>\n      <td>49</td>\n      <td>11</td>\n      <td>31.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "0b9e1ab1be18615d0f181e754d191d8c024e00b6"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c016fd108b0df799b55b6283458836175e02b34b"
      },
      "cell_type": "code",
      "source": "from sklearn.cross_validation import train_test_split\nx = train.drop(['number_of_tickets'], axis=1)\ny = train.number_of_tickets\nx_train, x_test, y_train , y_test = train_test_split(x,y,test_size = 0.01, random_state = 2)",
      "execution_count": 34,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "74b9bf5a30d843c9880147c712b7c31f03ab870a"
      },
      "cell_type": "markdown",
      "source": "Cross Validating"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "02f5de6080f68f0b03fe54af16ab404c33b927c7"
      },
      "cell_type": "code",
      "source": "model= GradientBoostingRegressor(random_state=2,n_estimators = 400, max_depth = 8,min_samples_split = 2,\n                                        learning_rate = 0.01,min_samples_leaf = 8)\nmodel.fit(x_train,y_train)",
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 44,
          "data": {
            "text/plain": "GradientBoostingRegressor(alpha=0.9, criterion='friedman_mse', init=None,\n             learning_rate=0.01, loss='ls', max_depth=8, max_features=None,\n             max_leaf_nodes=None, min_impurity_decrease=0.0,\n             min_impurity_split=None, min_samples_leaf=8,\n             min_samples_split=2, min_weight_fraction_leaf=0.0,\n             n_estimators=400, presort='auto', random_state=2,\n             subsample=1.0, verbose=0, warm_start=False)"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ee48a207c1c9a7e6b9ac5c89ad265d711d13e79f"
      },
      "cell_type": "code",
      "source": "model.score(x_test,y_test)",
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 45,
          "data": {
            "text/plain": "0.7899744588257995"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "fb80b47e0d3c47c9aeb4a653a2c47e7f72769c04"
      },
      "cell_type": "code",
      "source": "from sklearn.metrics import mean_absolute_error\npreds_train_set = model.predict(x_test)\nprint (mean_absolute_error(preds_train_set,y_test))",
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "text": "2.7885563058897525\n",
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "ff787b5eea0deed72f1144c8e82908ee664b0d00"
      },
      "cell_type": "markdown",
      "source": "predicting"
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "7c6a4386ed88f30cc594305dad4339fdc84ffb5b"
      },
      "cell_type": "code",
      "source": "test.drop(['travel_to'], axis=1, inplace=True)",
      "execution_count": 20,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "e00a34b921c9bdcb4d8413354508b822deec71a7"
      },
      "cell_type": "code",
      "source": "test[\"travel_date\"] = pd.to_datetime(test[\"travel_date\"],infer_datetime_format=True)\ntest['month'] = test['travel_date'].dt.strftime('%m')\ntest[\"travel_date\"] = test[\"travel_date\"].dt.dayofweek\ntest[\"car_type\"] = pd.Categorical(test[\"car_type\"], categories=car_type_categories)\ntest[\"car_type\"] = test.car_type.cat.codes\ntest[\"travel_from\"] = pd.Categorical(test[\"travel_from\"], categories=travel_from_categories)\ntest[\"travel_from\"] = test.travel_from.cat.codes\ntest[\"travel_time\"] = test[\"travel_time\"].str.split(':').apply(lambda x: int(x[0]) * 60 + int(x[1]))",
      "execution_count": 21,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "dbccc086bbb251d21f56022a5d4e9adf69f646a5"
      },
      "cell_type": "code",
      "source": "test.head()",
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "   ride_id  travel_date  travel_time  ...    car_type  max_capacity  month\n0      247            0          426  ...           0            49     05\n1      256            6          668  ...           1            11     05\n2      275            4          300  ...           1            11     05\n3      285            4          550  ...           1            11     05\n4      286            4          560  ...           1            11     05\n\n[5 rows x 7 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ride_id</th>\n      <th>travel_date</th>\n      <th>travel_time</th>\n      <th>travel_from</th>\n      <th>car_type</th>\n      <th>max_capacity</th>\n      <th>month</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>247</td>\n      <td>0</td>\n      <td>426</td>\n      <td>7</td>\n      <td>0</td>\n      <td>49</td>\n      <td>05</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>256</td>\n      <td>6</td>\n      <td>668</td>\n      <td>7</td>\n      <td>1</td>\n      <td>11</td>\n      <td>05</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>275</td>\n      <td>4</td>\n      <td>300</td>\n      <td>7</td>\n      <td>1</td>\n      <td>11</td>\n      <td>05</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>285</td>\n      <td>4</td>\n      <td>550</td>\n      <td>7</td>\n      <td>1</td>\n      <td>11</td>\n      <td>05</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>286</td>\n      <td>4</td>\n      <td>560</td>\n      <td>7</td>\n      <td>1</td>\n      <td>11</td>\n      <td>05</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "d85af536687df8f8977098b09fd855d6647474d7"
      },
      "cell_type": "code",
      "source": "X_test = test.drop(['ride_id'], axis=1)\ntest_set_predictions = model.predict(X_test)",
      "execution_count": 47,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "fe4d385a354751f541eab6ea9b19369372175ed7"
      },
      "cell_type": "code",
      "source": "d = {'ride_id': test[\"ride_id\"], 'number_of_ticket': test_set_predictions}\ndf_predictions = pd.DataFrame(data=d)\ndf_predictions = df_predictions[['ride_id','number_of_ticket']]",
      "execution_count": 48,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "c6c5fa74782103b9bd10990f5379835ab4738edb"
      },
      "cell_type": "code",
      "source": "df_predictions.head()",
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 49,
          "data": {
            "text/plain": "   ride_id  number_of_ticket\n0      247          9.561675\n1      256          7.690586\n2      275          2.664037\n3      285          8.682500\n4      286          8.682500",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ride_id</th>\n      <th>number_of_ticket</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>247</td>\n      <td>9.561675</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>256</td>\n      <td>7.690586</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>275</td>\n      <td>2.664037</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>285</td>\n      <td>8.682500</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>286</td>\n      <td>8.682500</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "207eba44500b4f8e9582d33e7d13e3f6c8aa6b22"
      },
      "cell_type": "code",
      "source": "df_predictions['number_of_ticket'] = df_predictions['number_of_ticket'].astype('int64', copy=False)\ndf_predictions.to_csv('preds_test16.csv', index=False) #save to csv file",
      "execution_count": 50,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "b87946a35a0867c107d99c7a7b0360e99aeebc5b"
      },
      "cell_type": "code",
      "source": "",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}